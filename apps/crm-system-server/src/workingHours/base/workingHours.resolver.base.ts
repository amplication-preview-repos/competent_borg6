/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WorkingHours } from "./WorkingHours";
import { WorkingHoursCountArgs } from "./WorkingHoursCountArgs";
import { WorkingHoursFindManyArgs } from "./WorkingHoursFindManyArgs";
import { WorkingHoursFindUniqueArgs } from "./WorkingHoursFindUniqueArgs";
import { CreateWorkingHoursArgs } from "./CreateWorkingHoursArgs";
import { UpdateWorkingHoursArgs } from "./UpdateWorkingHoursArgs";
import { DeleteWorkingHoursArgs } from "./DeleteWorkingHoursArgs";
import { Project } from "../../project/base/Project";
import { User } from "../../user/base/User";
import { WorkingHoursService } from "../workingHours.service";
@graphql.Resolver(() => WorkingHours)
export class WorkingHoursResolverBase {
  constructor(protected readonly service: WorkingHoursService) {}

  async _workingHoursItemsMeta(
    @graphql.Args() args: WorkingHoursCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WorkingHours])
  async workingHoursItems(
    @graphql.Args() args: WorkingHoursFindManyArgs
  ): Promise<WorkingHours[]> {
    return this.service.workingHoursItems(args);
  }

  @graphql.Query(() => WorkingHours, { nullable: true })
  async workingHours(
    @graphql.Args() args: WorkingHoursFindUniqueArgs
  ): Promise<WorkingHours | null> {
    const result = await this.service.workingHours(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorkingHours)
  async createWorkingHours(
    @graphql.Args() args: CreateWorkingHoursArgs
  ): Promise<WorkingHours> {
    return await this.service.createWorkingHours({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WorkingHours)
  async updateWorkingHours(
    @graphql.Args() args: UpdateWorkingHoursArgs
  ): Promise<WorkingHours | null> {
    try {
      return await this.service.updateWorkingHours({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkingHours)
  async deleteWorkingHours(
    @graphql.Args() args: DeleteWorkingHoursArgs
  ): Promise<WorkingHours | null> {
    try {
      return await this.service.deleteWorkingHours(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: WorkingHours
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: WorkingHours): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async CreateWorkingHours(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateWorkingHours(args);
  }

  @graphql.Query(() => String)
  async GetWorkingHours(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetWorkingHours(args);
  }
}
