/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkingHours as PrismaWorkingHours,
  Project as PrismaProject,
  User as PrismaUser,
} from "@prisma/client";

export class WorkingHoursServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkingHoursCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workingHours.count(args);
  }

  async workingHoursItems<T extends Prisma.WorkingHoursFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkingHoursFindManyArgs>
  ): Promise<PrismaWorkingHours[]> {
    return this.prisma.workingHours.findMany<Prisma.WorkingHoursFindManyArgs>(
      args
    );
  }
  async workingHours<T extends Prisma.WorkingHoursFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkingHoursFindUniqueArgs>
  ): Promise<PrismaWorkingHours | null> {
    return this.prisma.workingHours.findUnique(args);
  }
  async createWorkingHours<T extends Prisma.WorkingHoursCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkingHoursCreateArgs>
  ): Promise<PrismaWorkingHours> {
    return this.prisma.workingHours.create<T>(args);
  }
  async updateWorkingHours<T extends Prisma.WorkingHoursUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkingHoursUpdateArgs>
  ): Promise<PrismaWorkingHours> {
    return this.prisma.workingHours.update<T>(args);
  }
  async deleteWorkingHours<T extends Prisma.WorkingHoursDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkingHoursDeleteArgs>
  ): Promise<PrismaWorkingHours> {
    return this.prisma.workingHours.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.workingHours
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.workingHours
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async CreateWorkingHours(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetWorkingHours(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
